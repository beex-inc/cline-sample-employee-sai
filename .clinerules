# 開発ガイドライン

# 1. 開発規約
## 1.1 コードコメント
- 日本語で記述
- 関数やクラスには目的と使用方法を記載
- 複雑なロジックには処理の説明を追加
- TODO コメントには対応予定や理由を明記

## 1.2 技術用語の使い分け
- コード内の変数名・関数名：英語
- コメント：日本語
- エラーメッセージ：日本語
- ログメッセージ：日本語
- データベース関連：英語（テーブル名、カラム名）

## 1.3 機能追加のルール
- 要件を明確に文書化
- 実装前に要件の確認を実施
- 既存機能への影響を評価
- テストケースを作成

## 1.4 改善提案
- 実装完了後に記録
- 改善内容を具体的に記述
- 優先度と影響範囲を明記
- 改善理由を明確に説明

# 2. 開発プロセス
## 2.0 実行環境
### Docker環境での実行
- コマンド実行ルール
  * コンテナ内で直接実行
  * docker/docker-composeコマンドの使用禁止
  * コンテナのライフサイクル管理は外部で実施

### サーバー管理
- 起動前の確認事項
  * 実行中プロセスの確認
  * ポート使用状況の確認
  * 既存サーバーの状態確認
- プロセス確認コマンド
  ```bash
  ps aux | grep "python app.py" || \
  lsof -i :5000 || \
  curl -s --connect-timeout 1 http://localhost:5000
  ```
- 実行ルール
  * 既存サーバー稼働時は新規起動禁止
  * 既存サーバーの終了操作禁止
  * 新規起動時のコマンド
    ```bash
    cd backend && python app.py
    ```

## 2.1 コードレビュー
- 1ファイル変更ごとにレビューを実施
- レビュー前の確認事項
  * ファイル内のエラー・警告の修正
  * コーディング規約の遵守
  * 適切なコメントの記述
- 実行時エラーは許容

## 2.2 パフォーマンス考慮
- ファイル読み込みの最適化
  * 必要最小限のファイル読み込み
  * キャッシュの活用
  * バッチ処理の利用
- 検索処理の最適化
  * コマンドラインツールの優先使用
  * インデックスの活用
  * クエリの最適化

## 2.3 作業範囲
- 指示された範囲内での作業に徹する
- 範囲外の修正が必要な場合は報告
- 追加提案は実装完了後に行う
- コメント追加は随時可能

# 3. 品質管理
## 3.0 コマンド実行の検証
### エラーチェック手順
1. コマンド実行後の出力を確認
   □ エラーメッセージの有無をチェック
   □ 期待される出力と実際の出力を比較
   □ スタックトレースの確認

2. エラー発生時の対応
   □ エラーメッセージを解析
   □ エラーの種類を特定（例：SQLエラー、構文エラー等）
   □ エラーの原因を特定
   □ 修正案を提示

3. 実行結果の検証
   ```bash
   # コマンド実行後、以下のチェックを実施
   if [ $? -ne 0 ]; then
       echo "エラーが発生しました"
       # エラー内容の詳細を表示
       echo "終了コード: $?"
   fi
   ```

## 3.1 コード品質
- 命名規則の遵守
- 適切な関数分割
- 重複コードの排除
- エラー処理の実装

## 3.2 テスト
### テスト実施前の確認事項
□ すべてのモジュールのテストを実施済みか
□ 各テストの成功をユーザーから確認済みか
□ テスト結果を文書化済みか

### テスト戦略
1. 機能テスト
   - 各機能の正常系テスト
   - エッジケースの考慮
   - エラーケースのテスト

2. APIテスト
   - curlを使用したエンドポイントテスト
   - `-v` フラグでレスポンス詳細確認
   - ステータスコード、ヘッダー、ボディの検証
   - エラーハンドリングテスト（400, 404, 500等）

3. パフォーマンステスト
   - レスポンスタイムの計測
   - リソース使用量の確認
   - 負荷テスト（必要な場合）

4. セキュリティテスト
   - 入力値の検証
   - 認証・認可の確認
   - セキュリティヘッダーの確認

### テストワークフロー
- テストは1ファイルずつ実行
- テスト失敗時：
  1. エラーメッセージを確認
  2. 該当ファイルのみを修正
  3. テストを再実行
  4. 成功確認後、次のファイルへ

## 3.3 ドキュメント
- コードコメントの維持
- 設計書の更新
- 変更履歴の記録
- 運用手順の更新

# 4. セキュリティ規約
## 4.1 禁止事項
- .envファイルの変更
- 設定ファイル（**/config/secrets.*）の編集
- APIキーや認証情報の取り扱い

## 4.2 ファイル修正ルール
### 同一ファイルの複数回修正
- 同じファイルを3回以上修正する場合：
  □ 一旦作業を中断
  □ ユーザーに現状を説明
  □ 修正方針の確認を取る
  □ 承認を得てから作業を継続

### 修正履歴の管理
- 各ファイルの修正回数を記録
- 修正の意図と結果を明確に説明
- 必要に応じてリファクタリングを提案

# 5. 改善管理
## 5.1 改善提案の記録
- 提案内容
  * 改善対象
  * 改善内容
  * 期待効果
  * 優先度
- 記録場所：改善提案ログ（improvements.log）

## 5.2 改善の実施
- 優先度に基づく実施判断
- リソース状況の考慮
- 影響範囲の評価
- 段階的な実施

# 6. 開発規約遵守状況
## 6.1 コメント記述
- [x] 日本語でのコメント記述
- [x] 関数の目的説明
- [ ] 複雑なロジックの解説
- [ ] TODOコメントの管理

## 6.2 技術用語
- [x] 適切な英語/日本語の使い分け
- [x] 一貫性のある命名規則
- [x] わかりやすいエラーメッセージ
- [ ] 統一されたログ形式

## 6.3 機能追加
- [x] 要件に基づく実装
- [x] 影響範囲の評価
- [ ] テストケースの作成
- [ ] ドキュメントの更新

## 6.4 改善管理
- [x] 改善提案の記録
- [ ] 優先度の評価
- [ ] 実施計画の作成
- [ ] 効果の測定
